#To predict the percentage of an student based on the number of study hours.
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as viz
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

supervised_linear = pd.read_csv("Task 1.csv")
supervised_linear.head()

supervised_linear.columns
supervised_linear.info()
#Data cleaning
supervised_linear.isnull().sum()
supervised_linear.describe()

#Scatter plot visualization
supervised_linear.plot(x = 'Hours', y = 'scores', style = 'o')
viz.title("Linear Regression on training data")
viz.xlabel("Hours")
viz.ylabel("Scores")
viz.show()

#Data splitting
X = supervised_linear.iloc[:,0].values.reshape(-1,1)
y = supervised_linear.iloc[:,-1].values.reshape(-1,1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

#Model fitting
srija = LinearRegression() 
srija.fit(X_train, y_train)

y_inter = srija.coef_*X + srija.intercept_

print("Slope :", srija.coef_)
print("Intercept :",srija.intercept_)

#Fitting the regression line
viz.scatter(X, y)
viz.plot(X, y_inter);
viz.show()

#To predict the percentage of scores based on the number of hours studied
y_pred = srija.predict(X_test)
print(y_test)

# actual vs predicted
a = y_test.tolist()
b = y_pred.tolist()
ap = pd.DataFrame({'Actual':a, 'Predicted':b})
ap

#To predict score if a student studied for 9.25 hrs/day
hours_studied = np.array([9.25]).reshape(-1,1)
prediction = srija.predict(hours_studied)
print("No of Hours = {}".format(hours_studied))
print("Predicted Score = {}".format(prediction[0]))

#Evaluation of models
mae = mean_absolute_error(y_test, y_pred)
print(mae)
mse = mean_squared_error(y_test, y_pred)
print(mse)
rmse = mean_squared_error(y_test, y_pred, squared = False)
print(rmse)
r2_sc = r2_score(y_test, y_pred)
print("R^2 score is: ", r2_sc)
n = len(y_test)
k = len((X_test))
adj_r2_sc = 1-(((1-r2_sc)*(n-1))/(n-k-1))
print(adj_r2_sc)

import time
start = time.time()
x = 0
for r in range(1000000):
    x += 1
time.sleep(3)
end = time.time()
execution = end - start
print("Execution time:", execution, "seconds." )
